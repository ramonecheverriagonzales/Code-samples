import pygame, sys
import random
from os import path
from pygame.locals import *
pygame.init()

screenwidth = 700
screenheight = 600

screen = pygame.display.set_mode((screenwidth, screenheight))
pygame.display.set_caption("Shmup")



BLACK = (0,0,0)
WHITE = (255,255,255)
RED = (255,0,0)
BLUE = (0,0,255)
GREEN = (0,255,0)

score_points = 0
bullet_count = 5
lives = 3
health_points_orig = 200
health_points = health_points_orig
heart_size = 20

game_over = False
    
expl_images = ["regularExplosion00.png", "regularExplosion01.png", "regularExplosion02.png", "regularExplosion03.png", "regularExplosion04.png", "regularExplosion05.png", "regularExplosion06.png", "regularExplosion07.png", "regularExplosion08.png"]
    
def explosion_images(img_list):
    global expl_images
    for i in range(9):
        images = pygame.image.load(path.join("graphics", expl_images[i - 1])).convert()
        images.set_colorkey(BLACK)
        img_list.append(images)


aos_explosion = []
explosion_images(aos_explosion)


fire_sound = pygame.mixer.Sound(path.join("sounds", "pew.wav"))

bg = pygame.image.load(path.join("graphics", "840045-amazing-background-space-1920x1080-retina.png")).convert()
bg_scaled = pygame.transform.scale(bg, (screenwidth, screenheight))

heart = pygame.image.load(path.join("graphics", "hearth_art.png")).convert()
heart = pygame.transform.scale(heart, (heart_size, heart_size))
heart.set_colorkey(WHITE)

gameover = pygame.image.load(path.join("graphics", "color-me-happy-game-over-blue_a-G-15238159-0.png")).convert()
gameover = pygame.transform.scale(gameover, (400,400))

                             



clock = pygame.time.Clock()


class Explosion(pygame.sprite.Sprite):
    def __init__(self, center, size):
        global aos_explosion
        pygame.sprite.Sprite.__init__(self)
        self.center = center
        self.size = size
        self.image = aos_explosion[0]
        self.image = pygame.transform.scale(self.image, (self.size, self.size))
        self.rect = self.image.get_rect()
        self.rect.center = self.center
        self.last_update = pygame.time.get_ticks()
        self.frame = 0
        self.frame_rate = 50
    def update(self):
        now = pygame.time.get_ticks()
        if now - self.last_update > self.frame_rate:
            self.last_update = now
            self.frame += 1
            
            if self.frame == len(aos_explosion):
                self.kill()
            else:
                self.image = aos_explosion[self.frame]
                self.image = pygame.transform.scale(self.image, (self.size, self.size))
                self.rect = self.image.get_rect()
                self.rect.center = self.center

class Bullets(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load(path.join("graphics", "laserBlue16.png")).convert()
        self.image = pygame.transform.scale(self.image, (10,40))
        self.image.set_colorkey(WHITE)
        self.rect = self.image.get_rect()
        self.rect.x = x - 6
        self.rect.y = y
        self.speedy = 10
        
    def update(self):
        self.rect.y -= self.speedy
        if self.rect.bottom < 0:
            self.kill()


class Player(pygame.sprite.Sprite):  
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.size = 60
        self.image = pygame.image.load(path.join("graphics", "playerShip1_blue.png")).convert()
        self.image = pygame.transform.scale(self.image, (self.size, self.size))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.radius = 20
        self.rect.x = screenwidth//2
        self.rect.y = screenheight - self.size * 1.5
        self.speed = 10
        self.shoot_delay = 250
        self.last_shot = pygame.time.get_ticks()
        self.sound = pygame.mixer.Sound(path.join("sounds", "pew.wav"))
        
    def shoot(self):
        global bullet_count
        now = pygame.time.get_ticks()
        if bullet_count >= 1 and now - self.shoot_delay > self.last_shot:
            self.sound.play()
            self.last_shot = now
            bullet = Bullets(self.rect.centerx, self.rect.y)
            bullet_sprites.add(bullet)
            all_sprites.add(bullet)
            bullet_count -= 1    
        
    def update(self):
        self.speedx = 0
        ks = pygame.key.get_pressed()
        if ks[K_RIGHT]:
            self.speedx = self.speed
        if ks[K_LEFT]:
            self.speedx = -self.speed
        self.rect.x += self.speedx
        if ks[K_SPACE]:
            self.shoot()
        
        if self.rect.left < 0:
            self.rect.left = 0
        if self.rect.right > screenwidth:
            self.rect.right = screenwidth
        
        
class Asteroids(pygame.sprite.Sprite):
    
    def __init__(self):
        meteor_images = ["meteorBrown_big1.png", "meteorBrown_big2.png", "meteorBrown_big3.png", "meteorBrown_big4.png", "meteorBrown_med1.png", "meteorBrown_med3.png", "meteorGrey_big2.png", "meteorGrey_big3.png"]
        pygame.sprite.Sprite.__init__(self)
        self.width = random.randrange(20,60)
        self.height = self.width
        self.scale = 1.5
        self.image_orig = pygame.image.load(path.join("graphics", random.choice(meteor_images))).convert()
        self.image_orig = pygame.transform.scale(self.image_orig, (self.width + self.width //2, self.width + self.width//2))
        self.image_orig.set_colorkey(BLACK)
        self.image = self.image_orig.copy()
        self.rect = self.image.get_rect()
        self.radius = self.width//2 + self.width//4
        self.rect.x = random.randrange(0, screenwidth)
        self.rect.y = 0 - random.randrange(0,2000)
        self.speedx = random.randrange(-1,1)
        self.speedy = random.randrange(1,8)
        self.rot = 0
        self.rot_speed = random.randrange(-8, 8)
        self.last_update = pygame.time.get_ticks()
        

    def rotate(self):
        now = pygame.time.get_ticks()
        if now - self.last_update > 50:
            self.last_update = now
            self.rot = (self.rot + self.rot_speed) % 360
            new_image = pygame.transform.rotate(self.image_orig, self.rot)
            old_center = self.rect.center
            self.image = new_image
            self.rect = self.image.get_rect()
            self.radius = self.width//2 + self.width//4
            self.rect.center = old_center
            
    def update(self):
        self.rotate()
        global bullet_count
        self.rect.x += self.speedx
        self.rect.y += self.speedy
        
        if self.rect.top > screenheight:
            bullet_count += 0.1
            
        if self.rect.left > screenwidth or self.rect.right < 0 or self.rect.top > screenheight:
            self.rect.x = random.randrange(0, screenwidth)
            self.rect.y = 0 - random.randrange(self.height, 2000)

def asteroid():
    asteroid = Asteroids()
    all_sprites.add(asteroid)
    asteroid_sprites.add(asteroid)
            
        
bullet_sprites = pygame.sprite.Group()  
asteroid_sprites = pygame.sprite.Group()
all_sprites = pygame.sprite.Group()

player = Player()
all_sprites.add(player)

for i in range(50):
    asteroid()


    
def bulletCollision():
    global bullet_count
    global score_points
    hits = pygame.sprite.groupcollide(asteroid_sprites, bullet_sprites, True, True)
    for hit in hits:
        expl = Explosion(hit.rect.center, 75)
        all_sprites.add(expl)
        score_points += hit.width
        bullet_count += 1
        asteroid()
        
def playerCollision():
    global health_points
    global lives
    global game_over
    collision = pygame.sprite.spritecollide(player, asteroid_sprites, True, pygame.sprite.collide_circle)
    for hit in collision:
        expl = Explosion(hit.rect.center, 32)
        all_sprites.add(expl)
        health_points -= hit.width * 3
        asteroid()
    if health_points < 0:
        lives -= 1
        health_points = health_points_orig
    if lives < 1:
        game_over = True
        g_over()
        
def score_text(score_points):
    font = pygame.font.Font(None, 40)
    text = font.render(str(score_points), True, WHITE)
    screen.blit(text,(5,5))
    
def ammo():
    if not game_over:
        font = pygame.font.Font(None, 20)
        text = font.render("AMMO : ", True, WHITE)
        font2 = pygame.font.Font(None, 20)
        ammo = font2.render(str(int(bullet_count//1)), True, WHITE)
        screen.blit(text, (5, 40))
        screen.blit(ammo, (60,41))  
    
def draw_health_points():
    global game_over
    global health_points
    if not game_over:
        pygame.draw.rect(screen, BLACK, (250, 5, 200, 21), 3)
        pygame.draw.rect(screen, GREEN, (250, 5, health_points, 20))

def draw_lives():
    global lives
    global heart
    for i in range(lives):
        heart_rect = heart.get_rect()
        heart_rect.x += 30 * (i)
        screen.blit(heart, (heart_rect.x, 60))
        
def g_over():
    global gameover
    all_sprites.remove(player, asteroid_sprites)
    screen.fill(BLACK)
    screen.blit(gameover, (150,50))
    
    

while True:
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
            
            
            
    screen.blit(bg_scaled, (0,0))
    all_sprites.update()
    all_sprites.draw(screen)
    bulletCollision()
    playerCollision()
    score_text(score_points)
    ammo() 
    draw_lives()
    draw_health_points()
    pygame.display.flip()
    clock.tick(60)
